#!/bin/sh
#-- groff for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ groff.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://groff.ffii.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=groff
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.22.2}
PVER=${PVER:-1.21}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to add some more docs
SB_DOC=${SB_DOC:-NO}

# Set to YES to enable japanese patch
SB_CJK=${SB_CJK:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.sig
PSRCARCHIVE=${NAME}-${PVER}-japanese.patch.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}"
MIRROR_GENTOO=${MIRROR_GENTOO:-ftp://ftp.ussg.iu.edu/pub/linux/gentoo}
PDL_URL="${MIRROR_GENTOO}/distfiles/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
if [ "${SB_CJK}" = "YES" ] ;then
  test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

for file in NEWS src/devices/grolbp/grolbp.man doc/{groff.info*,webpage.ms} \
  contrib/mm/*.man contrib/mom/examples/{README.txt,*.mom} ; do
  iconv -f iso-8859-1 -t utf-8 < "${file}" > "${file}_"
  mv "${file}_" "${file}"
done

unset SB_CJKOPTS
if [ "${SB_CJK}" = "YES" ] ;then
  sed -i -e '/^dodirs=/s|$(ALLDIRS) $(OTHERDIRS) dot|$(ALLDIRS) dot|g' Makefile.in
  bzcat ${CWD}/${PSRCARCHIVE} | patch -p1 -E --backup -z .cjk --verbose  || exit 1
  SB_CJKOPTS="--enable-japanese"
  autoreconf -ivf -I m4 || exit 1
fi

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-rpath \
  --with-appresdir=/etc/X11/app-defaults \
  --with-grofferdir=/usr/share/${NAME}/${VERSION}/groffer \
  ${SB_CJKOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
mkdir -p ${PKG}/usr ${PKG}/etc/X11/app-defaults
make install DESTDIR=${PKG} || exit 1

( cd src/devices/xditview || exit 1
  cp -a GXditview.ad ${PKG}/etc/X11/app-defaults/GXditview || exit 1
)

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Do not use color ANSI output by default for man pages.
# A silly "innovation" if ever there was one, sure to break
# a ton of existing scripts otherwise...
zcat ${CWD}/groff.man.mdoc.local.gz \
  >> ${PKG}/usr/share/groff/site-tmac/man.local || exit 1
zcat ${CWD}/groff.man.mdoc.local.gz \
  >> ${PKG}/usr/share/groff/site-tmac/mdoc.local || exit 1

ln -s eqn ${PKG}/usr/bin/geqn
ln -s indxbib ${PKG}/usr/bin/gindxbib
ln -s pic ${PKG}/usr/bin/gpic
ln -s refer ${PKG}/usr/bin/grefer
ln -s soelim ${PKG}/usr/bin/gsoelim
ln -s soelim ${PKG}/usr/bin/zsoelim
ln -s tbl ${PKG}/usr/bin/gtbl
ln -s troff ${PKG}/usr/bin/gtroff
ln -s lookbib ${PKG}/usr/bin/glookbib
ln -s nroff ${PKG}/usr/bin/gnroff
ln -s neqn ${PKG}/usr/bin/gneqn

rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/groff/site-tmac
rmdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/groff

for file in $(find ${PKG}/usr/share/${NAME}/${VERSION}/font/devps -name '*.pfa'); do
  mv ${file} ${file}_ || exit 1
done

sed --in-place 's/\.pfa$/.pfa_/' ${PKG}/usr/share/${NAME}/${VERSION}/font/devps/download || exit 1

chmod 755 ${PKG}/usr/share/${NAME}/${VERSION}/groffer/version.sh
chmod 755 ${PKG}/usr/share/${NAME}/${VERSION}/font/devlj4/generate/special.awk

# Add a documentation directory:
mkdir -p ${DOCDIR}/xditview
ln -sf ../examples/mom/mom-pdf.pdf ${DOCDIR}/pdf/mom-pdf.pdf
if [ "${SB_DOC}" != "YES" ] ;then
  rm -rf ${DOCDIR}/*.ps ${DOCDIR}/examples ${DOCDIR}/html ${DOCDIR}/pdf
fi
cp -a \
  BUG-REPORT COPYING FDL MORE.STUFF NEWS PROBLEMS PROJECTS README \
  TODO ${CWD}/ChangeLog.SB ${DOCDIR}/
( cd src/devices/xditview ; cp -a README TODO ${DOCDIR}/xditview/ )
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}.info.gz 2>/dev/null
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/*.local.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
