commit 7b32da89c11e309545d801abdcb2fb6fa8ff1a5f
Author: Andrea Iacovitti <aiacovitti@libero.it>
Date:   Sun May 11 01:54:39 2014 +0200

    No need to cast to unsigned for ValueList::size().

diff --git a/khtml/css/cssparser.cpp b/khtml/css/cssparser.cpp
index d8c503c..c786346 100644
--- a/khtml/css/cssparser.cpp
+++ b/khtml/css/cssparser.cpp
@@ -56,8 +56,8 @@ using namespace DOM;
 
 ValueList::~ValueList()
 {
-     unsigned numValues = m_values.size();
-     for (unsigned i = 0; i < numValues; i++)
+     const int numValues = m_values.size();
+     for (int i = 0; i < numValues; ++i)
          if (m_values[i].unit == Value::Function)
              delete m_values[i].function;
 }
@@ -480,7 +480,7 @@ bool CSSParser::parseValue( int propId, bool important )
 
     int id = value->id;
 
-    int num = inShorthand() ? 1 : valueList->size();
+    const int num = inShorthand() ? 1 : valueList->size();
 
     if ( id == CSS_VAL_INHERIT ) {
         if (num != 1)
@@ -1482,7 +1482,7 @@ bool CSSParser::parse4Values(int propId, const int *properties,  bool important
      * right, bottom, and left, respectively.
      */
 
-    int num = inShorthand() ? 1 : valueList->size();
+    const int num = inShorthand() ? 1 : valueList->size();
     //qDebug("parse4Values: num=%d %d", num,  valueList->numValues );
 
     ShorthandScope scope(this, propId);
@@ -1616,8 +1616,9 @@ bool CSSParser::parseContent( int propId, bool important )
 
 CSSValueImpl* CSSParser::parseCounterContent(ValueList *args, bool counters)
 {
-    if (counters || (args->size() != 1 && args->size() != 3))
-        if (!counters || (args->size() != 3 && args->size() != 5))
+    const int argsSize = args->size();
+    if (counters || (argsSize != 1 && argsSize != 3))
+        if (!counters || (argsSize != 3 && argsSize != 5))
             return 0;
 
     CounterImpl *counter = new CounterImpl;
@@ -1982,8 +1983,9 @@ bool CSSParser::parseShape( int propId, bool important )
     if ( fname != "rect(" || !args )
         return false;
 
+    const int argsSize = args->size();
     // rect( t, r, b, l ) || rect( t r b l )
-    if ( args->size() != 4 && args->size() != 7 )
+    if ( argsSize != 4 && argsSize != 7 )
         return false;
     RectImpl *rect = new RectImpl();
     bool valid = true;
@@ -2009,7 +2011,7 @@ bool CSSParser::parseShape( int propId, bool important )
         else
             rect->setLeft( length );
         a = args->next();
-        if ( a && args->size() == 7 ) {
+        if ( a && argsSize == 7 ) {
             if ( a->unit == Value::Operator && a->iValue == ',' ) {
                 a = args->next();
             } else {
diff --git a/khtml/css/cssparser.h b/khtml/css/cssparser.h
index f67e187..666380a 100644
--- a/khtml/css/cssparser.h
+++ b/khtml/css/cssparser.h
@@ -93,7 +93,7 @@ namespace DOM {
         ValueList() : m_current(0) { }
         ~ValueList();
         void addValue(const Value& v) { m_values.append(v); }
-        unsigned int size() const { return m_values.size(); }
+        int size() const { return m_values.size(); }
         Value* current() { return m_current < m_values.size() ? &m_values[m_current] : 0; }
         Value* next() { ++m_current; return current(); }
     private:
