From 0952de614e7cdb101478bbdbfa48fee5f1f70a5b Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Fri, 23 May 2014 22:36:59 +0200
Subject: [PATCH] fix type sizes for CPPUNIT_ASSERT_EQUAL

---
 src/test/RVNGBinaryDataTest.cpp | 10 +++++-----
 src/test/RVNGStringTest.cpp     | 10 +++++-----
 2 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/test/RVNGBinaryDataTest.cpp b/src/test/RVNGBinaryDataTest.cpp
index 13b5e9c..7b10a92 100644
--- a/src/test/RVNGBinaryDataTest.cpp
+++ b/src/test/RVNGBinaryDataTest.cpp
@@ -101,19 +101,19 @@ void RVNGBinaryDataTest::testConstruction()
 	const unsigned char input[] = "hello world";
 	const size_t len = RVNG_NUM_ELEMENTS(input);
 	RVNGBinaryData data(input, len);
-	CPPUNIT_ASSERT_EQUAL(len, data.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), data.size());
 	CPPUNIT_ASSERT(!data.empty());
 	CPPUNIT_ASSERT(equal(input, input + len, data.getDataBuffer()));
 
 	{
 		// copy construction
 		RVNGBinaryData copy(data);
-		CPPUNIT_ASSERT_EQUAL(len, copy.size());
+		CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), copy.size());
 		CPPUNIT_ASSERT(equal(input, input + len, copy.getDataBuffer()));
 	}
 	// COW: destruction of a copy does not touch the original
 	// this should be tested under valgrind
-	CPPUNIT_ASSERT_EQUAL(len, data.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), data.size());
 	CPPUNIT_ASSERT(equal(input, input + len, data.getDataBuffer()));
 
 	// assignment
@@ -121,7 +121,7 @@ void RVNGBinaryDataTest::testConstruction()
 	CPPUNIT_ASSERT_EQUAL(0ul, assign.size());
 	CPPUNIT_ASSERT(assign.empty());
 	assign = data;
-	CPPUNIT_ASSERT_EQUAL(len, assign.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), assign.size());
 	CPPUNIT_ASSERT(!assign.empty());
 	CPPUNIT_ASSERT(equal(input, input + len, assign.getDataBuffer()));
 
@@ -148,7 +148,7 @@ void RVNGBinaryDataTest::testAppend()
 	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned char>('h'), data.getDataBuffer()[0]);
 
 	data2.append(input + 1, len - 1);
-	CPPUNIT_ASSERT_EQUAL(len, data2.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), data2.size());
 	CPPUNIT_ASSERT(equal(input, input + len, data2.getDataBuffer()));
 	// again, the original is unchanged
 	CPPUNIT_ASSERT_EQUAL(1ul, data.size());
diff --git a/src/test/RVNGStringTest.cpp b/src/test/RVNGStringTest.cpp
index abaa8a5..5f99027 100644
--- a/src/test/RVNGStringTest.cpp
+++ b/src/test/RVNGStringTest.cpp
@@ -118,27 +118,27 @@ void RVNGStringTest::testConstruction()
 	const char input[] = "hello world";
 	const size_t len = RVNG_NUM_ELEMENTS(input) - 1;
 	RVNGString str(input);
-	CPPUNIT_ASSERT_EQUAL(len, str.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), str.size());
 	CPPUNIT_ASSERT_EQUAL(int(len), str.len());
 	CPPUNIT_ASSERT(equal(input, input + len, str.cstr()));
 
 	// copy construction
 	RVNGString copy(str);
-	CPPUNIT_ASSERT_EQUAL(len, copy.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), copy.size());
 	CPPUNIT_ASSERT_EQUAL(int(len), copy.len());
 	CPPUNIT_ASSERT(equal(input, input + len, copy.cstr()));
 
 	// assignment
 	RVNGString assign;
 	assign = str;
-	CPPUNIT_ASSERT_EQUAL(len, assign.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), assign.size());
 	CPPUNIT_ASSERT_EQUAL(int(len), assign.len());
 	CPPUNIT_ASSERT(equal(input, input + len, assign.cstr()));
 
 	// assignment from C string
 	RVNGString assign2;
 	assign2 = input;
-	CPPUNIT_ASSERT_EQUAL(len, assign.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), assign.size());
 	CPPUNIT_ASSERT_EQUAL(int(len), assign.len());
 	CPPUNIT_ASSERT(equal(input, input + len, assign.cstr()));
 }
@@ -164,7 +164,7 @@ void RVNGStringTest::testAppend()
 
 	// appending a C string
 	str2.append(input + 1);
-	CPPUNIT_ASSERT_EQUAL(len, str2.size());
+	CPPUNIT_ASSERT_EQUAL(static_cast<unsigned long>(len), str2.size());
 	CPPUNIT_ASSERT_EQUAL(int(len), str2.len());
 	CPPUNIT_ASSERT(equal(input, input + len, str2.cstr()));
 }
-- 
1.9.0

